{
  "name": "message-circle",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "keywords": [
    "comment",
    "chat",
    "conversation",
    "feedback",
    "speech bubble"
  ],
  "files": [
    {
      "path": "MessageCircleIcon.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport type { HTMLMotionProps, Variants } from \"motion/react\";\nimport { motion, useAnimation } from \"motion/react\";\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\n\nexport interface MessageCircleIconHandle {\n\tstartAnimation: () => void;\n\tstopAnimation: () => void;\n}\n\ninterface MessageCircleIconProps extends HTMLMotionProps<\"div\"> {\n\tsize?: number;\n}\n\nconst MessageCircleIcon = forwardRef<\n\tMessageCircleIconHandle,\n\tMessageCircleIconProps\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n\tconst controls = useAnimation();\n\tconst isControlled = useRef(false);\n\n\tuseImperativeHandle(ref, () => {\n\t\tisControlled.current = true;\n\t\treturn {\n\t\t\tstartAnimation: () => controls.start(\"animate\"),\n\t\t\tstopAnimation: () => controls.start(\"normal\"),\n\t\t};\n\t});\n\n\tconst handleEnter = useCallback(() => {\n\t\tif (!isControlled.current) controls.start(\"animate\");\n\t}, [controls]);\n\n\tconst handleLeave = useCallback(() => {\n\t\tif (!isControlled.current) controls.start(\"normal\");\n\t}, [controls]);\n\n\tconst svgVariants: Variants = {\n\t\tnormal: { scale: 1, rotate: 0 },\n\t\tanimate: {\n\t\t\tscale: [1, 1.05, 0.95, 1],\n\t\t\trotate: [0, -2, 2, 0],\n\t\t\ttransition: { duration: 1.4, ease: \"easeInOut\", repeat: Infinity },\n\t\t},\n\t};\n\n\tconst pathVariants: Variants = {\n\t\tnormal: { pathLength: 1, opacity: 1 },\n\t\tanimate: {\n\t\t\tpathLength: [0, 1],\n\t\t\topacity: [0.6, 1],\n\t\t\ttransition: { duration: 1.5, ease: \"easeInOut\", repeat: Infinity },\n\t\t},\n\t};\n\n\treturn (\n\t\t<motion.div\n\t\t\tclassName={cn(\"inline-flex\", className)}\n\t\t\tonMouseEnter={handleEnter}\n\t\t\tonMouseLeave={handleLeave}\n\t\t\t{...props}\n\t\t>\n\t\t\t<motion.svg\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\twidth={size}\n\t\t\t\theight={size}\n\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\tfill=\"none\"\n\t\t\t\tstroke=\"currentColor\"\n\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\tanimate={controls}\n\t\t\t\tinitial=\"normal\"\n\t\t\t\tvariants={svgVariants}\n\t\t\t>\n\t\t\t\t<motion.path\n\t\t\t\t\td=\"M2.992 16.342a2 2 0 0 1 .094 1.167l-1.065 \n               3.29a1 1 0 0 0 1.236 1.168l3.413-.998a2 2 \n               0 0 1 1.099.092 10 10 0 1 0-4.777-4.719\"\n\t\t\t\t\tvariants={pathVariants}\n\t\t\t\t/>\n\t\t\t</motion.svg>\n\t\t</motion.div>\n\t);\n});\n\nMessageCircleIcon.displayName = \"MessageCircleIcon\";\nexport { MessageCircleIcon };\n",
      "type": "registry:ui"
    }
  ]
}