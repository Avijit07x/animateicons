{
  "name": "chart-network",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "keywords": [
    "network",
    "graph",
    "analytics",
    "data",
    "statistics",
    "chart",
    "visualization",
    "metrics",
    "report",
    "dashboard",
    "nodes",
    "connections",
    "relationships",
    "topology",
    "mesh"
  ],
  "files": [
    {
      "path": "ChartNetworkIcon.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport type { HTMLMotionProps, Variants } from \"motion/react\";\nimport { motion, useAnimation } from \"motion/react\";\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\n\nexport interface ChartNetworkIconHandle {\n\tstartAnimation: () => void;\n\tstopAnimation: () => void;\n}\n\ninterface ChartNetworkIconProps extends HTMLMotionProps<\"div\"> {\n\tsize?: number;\n}\n\nconst ChartNetworkIcon = forwardRef<\n\tChartNetworkIconHandle,\n\tChartNetworkIconProps\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n\tconst controls = useAnimation();\n\tconst isControlled = useRef(false);\n\n\tuseImperativeHandle(ref, () => {\n\t\tisControlled.current = true;\n\t\treturn {\n\t\t\tstartAnimation: () => controls.start(\"animate\"),\n\t\t\tstopAnimation: () => controls.start(\"normal\"),\n\t\t};\n\t});\n\n\tconst handleEnter = useCallback(\n\t\t(e: React.MouseEvent<HTMLDivElement>) => {\n\t\t\tif (!isControlled.current) controls.start(\"animate\");\n\t\t\telse onMouseEnter?.(e);\n\t\t},\n\t\t[controls, onMouseEnter],\n\t);\n\n\tconst handleLeave = useCallback(\n\t\t(e: React.MouseEvent<HTMLDivElement>) => {\n\t\t\tif (!isControlled.current) controls.start(\"normal\");\n\t\t\telse onMouseLeave?.(e);\n\t\t},\n\t\t[controls, onMouseLeave],\n\t);\n\n\tconst pathVariants: Variants = {\n\t\tnormal: {\n\t\t\tpathLength: 1,\n\t\t\topacity: 0.7,\n\t\t\ttransition: { duration: 0.2 },\n\t\t},\n\t\tanimate: {\n\t\t\tpathLength: [0, 1],\n\t\t\topacity: [0.7, 1, 0.7],\n\t\t\ttransition: {\n\t\t\t\tduration: 0.6,\n\t\t\t\tease: \"easeInOut\",\n\t\t\t},\n\t\t},\n\t};\n\n\tconst circleVariants: Variants = {\n\t\tnormal: {\n\t\t\tscale: 1,\n\t\t\topacity: 0.7,\n\t\t\ttransition: { duration: 0.2 },\n\t\t},\n\t\tanimate: {\n\t\t\tscale: [0, 1],\n\t\t\topacity: [0.7, 1, 0.7],\n\t\t\ttransition: {\n\t\t\t\tduration: 0.4,\n\t\t\t\tease: \"easeOut\",\n\t\t\t},\n\t\t},\n\t};\n\n\tconst chartVariants: Variants = {\n\t\tnormal: {\n\t\t\tscale: 1,\n\t\t\ttransition: { duration: 0.2 },\n\t\t},\n\t\tanimate: {\n\t\t\tscale: [1, 1.05, 1],\n\t\t\ttransition: {\n\t\t\t\tduration: 0.4,\n\t\t\t\tease: \"easeInOut\",\n\t\t\t},\n\t\t},\n\t};\n\n\treturn (\n\t\t<motion.div\n\t\t\tclassName={cn(\"inline-flex items-center justify-center\", className)}\n\t\t\tonMouseEnter={handleEnter}\n\t\t\tonMouseLeave={handleLeave}\n\t\t\t{...props}\n\t\t>\n\t\t\t<motion.svg\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\twidth={size}\n\t\t\t\theight={size}\n\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\tfill=\"none\"\n\t\t\t\tstroke=\"currentColor\"\n\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\tvariants={chartVariants}\n\t\t\t\tanimate={controls}\n\t\t\t\tinitial=\"normal\"\n\t\t\t>\n\t\t\t\t<motion.path d=\"m13.11 7.664 1.78 2.672\" variants={pathVariants} />\n\t\t\t\t<motion.path d=\"m14.162 12.788-3.324 1.424\" variants={pathVariants} />\n\t\t\t\t<motion.path d=\"m20 4-6.06 1.515\" variants={pathVariants} />\n\t\t\t\t<motion.path d=\"M3 3v16a2 2 0 0 0 2 2h16\" variants={pathVariants} />\n\t\t\t\t<motion.circle cx=\"12\" cy=\"6\" r=\"2\" variants={circleVariants} />\n\t\t\t\t<motion.circle cx=\"16\" cy=\"12\" r=\"2\" variants={circleVariants} />\n\t\t\t\t<motion.circle cx=\"9\" cy=\"15\" r=\"2\" variants={circleVariants} />\n\t\t\t</motion.svg>\n\t\t</motion.div>\n\t);\n});\n\nChartNetworkIcon.displayName = \"ChartNetworkIcon\";\nexport { ChartNetworkIcon };\n",
      "type": "registry:ui"
    }
  ]
}