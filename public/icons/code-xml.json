{
  "name": "code-xml",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "keywords": [
    "source",
    "programming",
    "html",
    "xml"
  ],
  "files": [
    {
      "path": "CodeXmlIcon.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport type { HTMLMotionProps, Variants } from \"motion/react\";\nimport { motion, useAnimation } from \"motion/react\";\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\n\nexport interface CodeXmlIconHandle {\n\tstartAnimation: () => void;\n\tstopAnimation: () => void;\n}\n\ninterface CodeXmlIconProps extends HTMLMotionProps<\"div\"> {\n\tsize?: number;\n}\n\nconst CodeXmlIcon = forwardRef<CodeXmlIconHandle, CodeXmlIconProps>(\n\t({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n\t\tconst controls = useAnimation();\n\t\tconst isControlled = useRef(false);\n\n\t\tuseImperativeHandle(ref, () => {\n\t\t\tisControlled.current = true;\n\t\t\treturn {\n\t\t\t\tstartAnimation: () => controls.start(\"animate\"),\n\t\t\t\tstopAnimation: () => controls.start(\"normal\"),\n\t\t\t};\n\t\t});\n\n\t\tconst handleEnter = useCallback(\n\t\t\t(e: React.MouseEvent<HTMLDivElement>) => {\n\t\t\t\tif (!isControlled.current) controls.start(\"animate\");\n\t\t\t\telse onMouseEnter?.(e);\n\t\t\t},\n\t\t\t[controls, onMouseEnter],\n\t\t);\n\n\t\tconst handleLeave = useCallback(\n\t\t\t(e: React.MouseEvent<HTMLDivElement>) => {\n\t\t\t\tif (!isControlled.current) controls.start(\"normal\");\n\t\t\t\telse onMouseLeave?.(e);\n\t\t\t},\n\t\t\t[controls, onMouseLeave],\n\t\t);\n\n\t\tconst leftArrowVariants: Variants = {\n\t\t\tnormal: { x: 0, opacity: 1 },\n\t\t\tanimate: {\n\t\t\t\tx: [-2, 0, -2, 0],\n\t\t\t\topacity: [1, 0.8, 1],\n\t\t\t\ttransition: { duration: 1.2, repeat: Infinity, ease: \"easeInOut\" },\n\t\t\t},\n\t\t};\n\n\t\tconst rightArrowVariants: Variants = {\n\t\t\tnormal: { x: 0, opacity: 1 },\n\t\t\tanimate: {\n\t\t\t\tx: [2, 0, 2, 0],\n\t\t\t\topacity: [1, 0.8, 1],\n\t\t\t\ttransition: { duration: 1.2, repeat: Infinity, ease: \"easeInOut\" },\n\t\t\t},\n\t\t};\n\n\t\tconst slashVariants: Variants = {\n\t\t\tnormal: {\n\t\t\t\tstrokeDasharray: \"20\",\n\t\t\t\tstrokeDashoffset: \"20\",\n\t\t\t\topacity: 0.6,\n\t\t\t},\n\t\t\tanimate: {\n\t\t\t\tstrokeDasharray: \"20\",\n\t\t\t\tstrokeDashoffset: [20, 0],\n\t\t\t\topacity: [0.6, 1],\n\t\t\t\ttransition: {\n\t\t\t\t\tduration: 0.5,\n\t\t\t\t\tease: \"easeInOut\",\n\t\t\t\t\trepeat: Infinity,\n\t\t\t\t\trepeatType: \"reverse\",\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn (\n\t\t\t<motion.div\n\t\t\t\tclassName={cn(\"relative inline-flex\", className)}\n\t\t\t\tonMouseEnter={handleEnter}\n\t\t\t\tonMouseLeave={handleLeave}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<motion.svg\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\twidth={size}\n\t\t\t\t\theight={size}\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t\tanimate={controls}\n\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t>\n\t\t\t\t\t<motion.path\n\t\t\t\t\t\td=\"m18 16 4-4-4-4\"\n\t\t\t\t\t\tvariants={rightArrowVariants}\n\t\t\t\t\t/>\n\t\t\t\t\t<motion.path\n\t\t\t\t\t\td=\"m6 8-4 4 4 4\"\n\t\t\t\t\t\tvariants={leftArrowVariants}\n\t\t\t\t\t/>\n\t\t\t\t\t<motion.path\n\t\t\t\t\t\td=\"m14.5 4-5 16\"\n\t\t\t\t\t\tvariants={slashVariants}\n\t\t\t\t\t/>\n\t\t\t\t</motion.svg>\n\t\t\t</motion.div>\n\t\t);\n\t},\n);\n\nCodeXmlIcon.displayName = \"CodeXmlIcon\";\nexport { CodeXmlIcon };\n",
      "type": "registry:ui"
    }
  ]
}