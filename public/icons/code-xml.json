{
  "name": "code-xml",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "keywords": [
    "source",
    "programming",
    "html",
    "xml"
  ],
  "files": [
    {
      "path": "CodeXmlIcon.tsx",
      "content": "\"use client\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport type { HTMLMotionProps, Variants } from \"motion/react\";\r\nimport { motion, useAnimation, useReducedMotion } from \"motion/react\";\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\r\n\r\nexport interface CodeXmlIconHandle {\r\n\tstartAnimation: () => void;\r\n\tstopAnimation: () => void;\r\n}\r\n\r\ninterface CodeXmlIconProps extends HTMLMotionProps<\"div\"> {\r\n\tsize?: number;\r\n}\r\n\r\nconst CodeXmlIcon = forwardRef<CodeXmlIconHandle, CodeXmlIconProps>(\r\n\t({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n\t\tconst leftControls = useAnimation();\r\n\t\tconst rightControls = useAnimation();\r\n\t\tconst slashControls = useAnimation();\r\n\t\tconst isControlled = useRef(false);\r\n\t\tconst reduced = useReducedMotion();\r\n\r\n\t\tuseImperativeHandle(ref, () => {\r\n\t\t\tisControlled.current = true;\r\n\t\t\treturn {\r\n\t\t\t\tstartAnimation: () => {\r\n\t\t\t\t\tif (reduced) {\r\n\t\t\t\t\t\tleftControls.start(\"normal\");\r\n\t\t\t\t\t\trightControls.start(\"normal\");\r\n\t\t\t\t\t\tslashControls.start(\"normal\");\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tleftControls.start(\"animate\");\r\n\t\t\t\t\t\trightControls.start(\"animate\");\r\n\t\t\t\t\t\tslashControls.start(\"animate\");\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tstopAnimation: () => {\r\n\t\t\t\t\tleftControls.start(\"normal\");\r\n\t\t\t\t\trightControls.start(\"normal\");\r\n\t\t\t\t\tslashControls.start(\"normal\");\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\tconst handleEnter = useCallback(\r\n\t\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\r\n\t\t\t\tif (reduced) return;\r\n\t\t\t\tif (!isControlled.current) {\r\n\t\t\t\t\tleftControls.start(\"animate\");\r\n\t\t\t\t\trightControls.start(\"animate\");\r\n\t\t\t\t\tslashControls.start(\"animate\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tonMouseEnter?.(e as any);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t[leftControls, rightControls, slashControls, reduced, onMouseEnter],\r\n\t\t);\r\n\r\n\t\tconst handleLeave = useCallback(\r\n\t\t\t(e: React.MouseEvent<HTMLDivElement>) => {\r\n\t\t\t\tif (!isControlled.current) {\r\n\t\t\t\t\tleftControls.start(\"normal\");\r\n\t\t\t\t\trightControls.start(\"normal\");\r\n\t\t\t\t\tslashControls.start(\"normal\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tonMouseLeave?.(e as any);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t[leftControls, rightControls, slashControls, onMouseLeave],\r\n\t\t);\r\n\r\n\t\tconst leftArrowVariants: Variants = {\r\n\t\t\tnormal: { pathLength: 1, opacity: 1 },\r\n\t\t\tanimate: {\r\n\t\t\t\tpathLength: [0, 1],\r\n\t\t\t\topacity: [0.6, 1],\r\n\t\t\t\ttransition: { duration: 0.7, ease: \"easeInOut\" },\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tconst rightArrowVariants: Variants = {\r\n\t\t\tnormal: { pathLength: 1, opacity: 1 },\r\n\t\t\tanimate: {\r\n\t\t\t\tpathLength: [0, 1],\r\n\t\t\t\topacity: [0.6, 1],\r\n\t\t\t\ttransition: { duration: 0.7, ease: \"easeInOut\", delay: 0.1 },\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tconst slashVariants: Variants = {\r\n\t\t\tnormal: { pathLength: 1, opacity: 1 },\r\n\t\t\tanimate: {\r\n\t\t\t\tpathLength: [1, 0, 1],\r\n\t\t\t\topacity: [1, 0.4, 1],\r\n\t\t\t\ttransition: {\r\n\t\t\t\t\tduration: 1,\r\n\t\t\t\t\tease: \"easeInOut\",\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\treturn (\r\n\t\t\t<motion.div\r\n\t\t\t\tclassName={cn(\"inline-flex items-center justify-center\", className)}\r\n\t\t\t\tonMouseEnter={handleEnter}\r\n\t\t\t\tonMouseLeave={handleLeave}\r\n\t\t\t\t{...props}\r\n\t\t\t>\r\n\t\t\t\t<motion.svg\r\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\t\t\t\twidth={size}\r\n\t\t\t\t\theight={size}\r\n\t\t\t\t\tviewBox=\"0 0 24 24\"\r\n\t\t\t\t\tfill=\"none\"\r\n\t\t\t\t\tstroke=\"currentColor\"\r\n\t\t\t\t\tstrokeWidth=\"2\"\r\n\t\t\t\t\tstrokeLinecap=\"round\"\r\n\t\t\t\t\tstrokeLinejoin=\"round\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<motion.path\r\n\t\t\t\t\t\td=\"m6 8-4 4 4 4\"\r\n\t\t\t\t\t\tanimate={leftControls}\r\n\t\t\t\t\t\tinitial=\"normal\"\r\n\t\t\t\t\t\tvariants={leftArrowVariants}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<motion.path\r\n\t\t\t\t\t\td=\"m18 16 4-4-4-4\"\r\n\t\t\t\t\t\tanimate={rightControls}\r\n\t\t\t\t\t\tinitial=\"normal\"\r\n\t\t\t\t\t\tvariants={rightArrowVariants}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<motion.path\r\n\t\t\t\t\t\td=\"m14.5 4-5 16\"\r\n\t\t\t\t\t\tanimate={slashControls}\r\n\t\t\t\t\t\tinitial=\"normal\"\r\n\t\t\t\t\t\tvariants={slashVariants}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</motion.svg>\r\n\t\t\t</motion.div>\r\n\t\t);\r\n\t},\r\n);\r\n\r\nCodeXmlIcon.displayName = \"CodeXmlIcon\";\r\nexport { CodeXmlIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}