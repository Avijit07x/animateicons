{
  "name": "code",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "keywords": [
    "source",
    "programming",
    "html",
    "xml",
    "code"
  ],
  "files": [
    {
      "path": "CodeIcon.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport type { HTMLMotionProps, Variants } from \"motion/react\";\nimport { motion, useAnimation } from \"motion/react\";\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\n\nexport interface CodeHandle {\n\tstartAnimation: () => void;\n\tstopAnimation: () => void;\n}\n\ninterface CodeProps extends HTMLMotionProps<\"div\"> {\n\tsize?: number;\n}\n\nconst CodeIcon = forwardRef<CodeHandle, CodeProps>(\n\t({ className, size = 36, ...props }, ref) => {\n\t\tconst controls = useAnimation();\n\t\tconst isControlled = useRef(false);\n\n\t\tuseImperativeHandle(ref, () => {\n\t\t\tisControlled.current = true;\n\t\t\treturn {\n\t\t\t\tstartAnimation: () => controls.start(\"animate\"),\n\t\t\t\tstopAnimation: () => controls.start(\"normal\"),\n\t\t\t};\n\t\t});\n\n\t\tconst handleEnter = useCallback(() => {\n\t\t\tif (!isControlled.current) controls.start(\"animate\");\n\t\t}, [controls]);\n\n\t\tconst handleLeave = useCallback(() => {\n\t\t\tif (!isControlled.current) controls.start(\"normal\");\n\t\t}, [controls]);\n\n\t\tconst ease = [0.11, 0.99, 0.24, 1] as const;\n\n\t\tconst groupScale: Variants = {\n\t\t\tnormal: { scale: 1, rotate: 0 },\n\t\t\tanimate: {\n\t\t\t\tscale: [1, 1.03, 1],\n\t\t\t\trotate: [0, -0.5, 0],\n\t\t\t\ttransition: { duration: 0.8, ease },\n\t\t\t},\n\t\t};\n\n\t\tconst drawRight: Variants = {\n\t\t\tnormal: { strokeDasharray: \"0 1\", strokeDashoffset: 0 },\n\t\t\tanimate: {\n\t\t\t\tstrokeDasharray: 32,\n\t\t\t\tstrokeDashoffset: [32, 0],\n\t\t\t\ttransition: { duration: 1.1, ease, delay: 0.12 },\n\t\t\t},\n\t\t};\n\n\t\tconst drawLeft: Variants = {\n\t\t\tnormal: { strokeDasharray: \"0 1\", strokeDashoffset: 0 },\n\t\t\tanimate: {\n\t\t\t\tstrokeDasharray: 32,\n\t\t\t\tstrokeDashoffset: [32, 0],\n\t\t\t\ttransition: { duration: 1.1, ease, delay: 0.28 },\n\t\t\t},\n\t\t};\n\n\t\treturn (\n\t\t\t<motion.div\n\t\t\t\tclassName={cn(\"inline-flex items-center justify-center\", className)}\n\t\t\t\tonMouseEnter={handleEnter}\n\t\t\t\tonMouseLeave={handleLeave}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<motion.svg\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\twidth={size}\n\t\t\t\t\theight={size}\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t\tclassName=\"lucide lucide-code-icon lucide-code\"\n\t\t\t\t>\n\t\t\t\t\t<motion.g variants={groupScale} initial=\"normal\" animate={controls}>\n\t\t\t\t\t\t<motion.path\n\t\t\t\t\t\t\td=\"m16 18 6-6-6-6\"\n\t\t\t\t\t\t\tvariants={drawRight}\n\t\t\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\t\t\tanimate={controls}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<motion.path\n\t\t\t\t\t\t\td=\"m8 6-6 6 6 6\"\n\t\t\t\t\t\t\tvariants={drawLeft}\n\t\t\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\t\t\tanimate={controls}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</motion.g>\n\t\t\t\t</motion.svg>\n\t\t\t</motion.div>\n\t\t);\n\t},\n);\n\nCodeIcon.displayName = \"CodeIcon\";\nexport { CodeIcon };\n",
      "type": "registry:ui"
    }
  ]
}