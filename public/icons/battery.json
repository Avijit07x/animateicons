{
  "name": "battery",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "keywords": [
    "power",
    "charge",
    "energy",
    "status",
    "level"
  ],
  "files": [
    {
      "path": "BatteryIcon.tsx",
      "content": "\"use client\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport type { HTMLMotionProps, Variants } from \"motion/react\";\r\nimport { motion, useAnimation, useReducedMotion } from \"motion/react\";\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\r\n\r\nexport interface BatteryIconHandle {\r\n\tstartAnimation: () => void;\r\n\tstopAnimation: () => void;\r\n}\r\n\r\ninterface BatteryIconProps extends HTMLMotionProps<\"div\"> {\r\n\tsize?: number;\r\n}\r\n\r\nconst BatteryIcon = forwardRef<BatteryIconHandle, BatteryIconProps>(\r\n\t({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n\t\tconst svgControls = useAnimation();\r\n\t\tconst rectControls = useAnimation();\r\n\t\tconst tipControls = useAnimation();\r\n\r\n\t\tconst reduced = useReducedMotion();\r\n\t\tconst isControlled = useRef(false);\r\n\r\n\t\tuseImperativeHandle(ref, () => {\r\n\t\t\tisControlled.current = true;\r\n\t\t\treturn {\r\n\t\t\t\tstartAnimation: () => {\r\n\t\t\t\t\tif (reduced) {\r\n\t\t\t\t\t\tsvgControls.start(\"normal\");\r\n\t\t\t\t\t\trectControls.start(\"normal\");\r\n\t\t\t\t\t\ttipControls.start(\"normal\");\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsvgControls.start(\"warning\");\r\n\t\t\t\t\t\trectControls.start(\"warning\");\r\n\t\t\t\t\t\ttipControls.start(\"warning\");\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tstopAnimation: () => {\r\n\t\t\t\t\tsvgControls.start(\"normal\");\r\n\t\t\t\t\trectControls.start(\"normal\");\r\n\t\t\t\t\ttipControls.start(\"normal\");\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\tconst handleEnter = useCallback(\r\n\t\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\r\n\t\t\t\tif (reduced) return;\r\n\t\t\t\tif (!isControlled.current) {\r\n\t\t\t\t\tsvgControls.start(\"warning\");\r\n\t\t\t\t\trectControls.start(\"warning\");\r\n\t\t\t\t\ttipControls.start(\"warning\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tonMouseEnter?.(e as any);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t[svgControls, rectControls, tipControls, reduced, onMouseEnter],\r\n\t\t);\r\n\r\n\t\tconst handleLeave = useCallback(\r\n\t\t\t(e: React.MouseEvent<HTMLDivElement>) => {\r\n\t\t\t\tif (!isControlled.current) {\r\n\t\t\t\t\tsvgControls.start(\"normal\");\r\n\t\t\t\t\trectControls.start(\"normal\");\r\n\t\t\t\t\ttipControls.start(\"normal\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tonMouseLeave?.(e as any);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t[svgControls, rectControls, tipControls, onMouseLeave],\r\n\t\t);\r\n\r\n\t\tconst svgVariants: Variants = {\r\n\t\t\tnormal: { rotate: 0, scale: 1 },\r\n\t\t\twarning: {\r\n\t\t\t\trotate: [0, -4, 4, -2, 0],\r\n\t\t\t\tscale: [1, 1.1, 0.95, 1.05, 1],\r\n\t\t\t\ttransition: { duration: 0.8, ease: \"easeInOut\" },\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tconst rectVariants: Variants = {\r\n\t\t\tnormal: { pathLength: 1, opacity: 1 },\r\n\t\t\twarning: {\r\n\t\t\t\tpathLength: [1, 0.6, 1],\r\n\t\t\t\topacity: [1, 0.7, 1],\r\n\t\t\t\ttransition: { duration: 1, ease: \"easeInOut\" },\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tconst tipVariants: Variants = {\r\n\t\t\tnormal: { y: 0, opacity: 1 },\r\n\t\t\twarning: {\r\n\t\t\t\ty: [0, -2, 2, -1, 0],\r\n\t\t\t\topacity: [1, 0.6, 1],\r\n\t\t\t\ttransition: { duration: 0.7, ease: \"easeInOut\" },\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\treturn (\r\n\t\t\t<motion.div\r\n\t\t\t\tclassName={cn(\"inline-flex items-center justify-center\", className)}\r\n\t\t\t\tonMouseEnter={handleEnter}\r\n\t\t\t\tonMouseLeave={handleLeave}\r\n\t\t\t\t{...props}\r\n\t\t\t>\r\n\t\t\t\t<motion.svg\r\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\t\t\t\twidth={size}\r\n\t\t\t\t\theight={size}\r\n\t\t\t\t\tviewBox=\"0 0 24 24\"\r\n\t\t\t\t\tfill=\"none\"\r\n\t\t\t\t\tstroke=\"currentColor\"\r\n\t\t\t\t\tstrokeWidth=\"2\"\r\n\t\t\t\t\tstrokeLinecap=\"round\"\r\n\t\t\t\t\tstrokeLinejoin=\"round\"\r\n\t\t\t\t\tanimate={svgControls}\r\n\t\t\t\t\tinitial=\"normal\"\r\n\t\t\t\t\tvariants={svgVariants}\r\n\t\t\t\t>\r\n\t\t\t\t\t<motion.path\r\n\t\t\t\t\t\td=\"M22 14L22 10\"\r\n\t\t\t\t\t\tanimate={tipControls}\r\n\t\t\t\t\t\tinitial=\"normal\"\r\n\t\t\t\t\t\tvariants={tipVariants}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<motion.rect\r\n\t\t\t\t\t\tx=\"2\"\r\n\t\t\t\t\t\ty=\"6\"\r\n\t\t\t\t\t\twidth=\"16\"\r\n\t\t\t\t\t\theight=\"12\"\r\n\t\t\t\t\t\trx=\"2\"\r\n\t\t\t\t\t\tanimate={rectControls}\r\n\t\t\t\t\t\tinitial=\"normal\"\r\n\t\t\t\t\t\tvariants={rectVariants}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</motion.svg>\r\n\t\t\t</motion.div>\r\n\t\t);\r\n\t},\r\n);\r\n\r\nBatteryIcon.displayName = \"BatteryIcon\";\r\nexport { BatteryIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}