{
  "name": "external-link",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "keywords": [
    "outwards",
    "direction",
    "north-east",
    "diagonal",
    "share",
    "open",
    "external",
    "link",
    "outbound",
    "open",
    "share"
  ],
  "files": [
    {
      "path": "ExternalLinkIcon.tsx",
      "content": "\"use client\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport type { HTMLMotionProps, Variants } from \"motion/react\";\r\nimport { motion, useAnimation, useReducedMotion } from \"motion/react\";\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\r\n\r\nexport interface ExternalLinkIconHandle {\r\n\tstartAnimation: () => void;\r\n\tstopAnimation: () => void;\r\n}\r\n\r\ninterface ExternalLinkIconProps extends HTMLMotionProps<\"div\"> {\r\n\tsize?: number;\r\n}\r\n\r\nconst ExternalLinkIcon = forwardRef<\r\n\tExternalLinkIconHandle,\r\n\tExternalLinkIconProps\r\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n\tconst boxControls = useAnimation();\r\n\tconst arrowControls = useAnimation();\r\n\tconst reduced = useReducedMotion();\r\n\tconst isControlled = useRef(false);\r\n\r\n\tuseImperativeHandle(ref, () => {\r\n\t\tisControlled.current = true;\r\n\t\treturn {\r\n\t\t\tstartAnimation: () => {\r\n\t\t\t\tif (reduced) {\r\n\t\t\t\t\tboxControls.start(\"normal\");\r\n\t\t\t\t\tarrowControls.start(\"normal\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tboxControls.start(\"animate\");\r\n\t\t\t\t\tarrowControls.start(\"animate\");\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tstopAnimation: () => {\r\n\t\t\t\tboxControls.start(\"normal\");\r\n\t\t\t\tarrowControls.start(\"normal\");\r\n\t\t\t},\r\n\t\t};\r\n\t});\r\n\r\n\tconst handleEnter = useCallback(\r\n\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\r\n\t\t\tif (reduced) return;\r\n\t\t\tif (!isControlled.current) {\r\n\t\t\t\tboxControls.start(\"animate\");\r\n\t\t\t\tarrowControls.start(\"animate\");\r\n\t\t\t} else onMouseLeave?.(e as any);\r\n\t\t},\r\n\t\t[boxControls, arrowControls],\r\n\t);\r\n\r\n\tconst handleLeave = useCallback(\r\n\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\r\n\t\t\tif (!isControlled.current) {\r\n\t\t\t\tboxControls.start(\"normal\");\r\n\t\t\t\tarrowControls.start(\"normal\");\r\n\t\t\t} else onMouseLeave?.(e as any);\r\n\t\t},\r\n\t\t[boxControls, arrowControls],\r\n\t);\r\n\r\n\tconst boxVariants: Variants = {\r\n\t\tnormal: { pathLength: 1, opacity: 1 },\r\n\t\tanimate: {\r\n\t\t\tpathLength: [0, 1],\r\n\t\t\topacity: [0.6, 1],\r\n\t\t\ttransition: { duration: 0.8, ease: \"easeInOut\" },\r\n\t\t},\r\n\t};\r\n\r\n\tconst arrowVariants: Variants = {\r\n\t\tnormal: { x: 0, y: 0, opacity: 1 },\r\n\t\tanimate: {\r\n\t\t\tx: [0, 3, 0],\r\n\t\t\ty: [0, -3, 0],\r\n\t\t\topacity: [1, 1, 1],\r\n\t\t\ttransition: { duration: 0.6, ease: \"easeInOut\" },\r\n\t\t},\r\n\t};\r\n\r\n\treturn (\r\n\t\t<motion.div\r\n\t\t\tclassName={cn(\"inline-flex items-center justify-center\", className)}\r\n\t\t\tonMouseEnter={handleEnter}\r\n\t\t\tonMouseLeave={handleLeave}\r\n\t\t\t{...props}\r\n\t\t>\r\n\t\t\t<svg\r\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\t\t\twidth={size}\r\n\t\t\t\theight={size}\r\n\t\t\t\tviewBox=\"0 0 24 24\"\r\n\t\t\t\tfill=\"none\"\r\n\t\t\t\tstroke=\"currentColor\"\r\n\t\t\t\tstrokeWidth=\"2\"\r\n\t\t\t\tstrokeLinecap=\"round\"\r\n\t\t\t\tstrokeLinejoin=\"round\"\r\n\t\t\t>\r\n\t\t\t\t<motion.path\r\n\t\t\t\t\td=\"M15 3h6v6\"\r\n\t\t\t\t\tvariants={arrowVariants}\r\n\t\t\t\t\tinitial=\"normal\"\r\n\t\t\t\t\tanimate={arrowControls}\r\n\t\t\t\t/>\r\n\t\t\t\t<motion.path\r\n\t\t\t\t\td=\"M10 14 21 3\"\r\n\t\t\t\t\tvariants={arrowVariants}\r\n\t\t\t\t\tinitial=\"normal\"\r\n\t\t\t\t\tanimate={arrowControls}\r\n\t\t\t\t/>\r\n\t\t\t\t<motion.path\r\n\t\t\t\t\td=\"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6\"\r\n\t\t\t\t\tvariants={boxVariants}\r\n\t\t\t\t\tinitial=\"normal\"\r\n\t\t\t\t\tanimate={boxControls}\r\n\t\t\t\t/>\r\n\t\t\t</svg>\r\n\t\t</motion.div>\r\n\t);\r\n});\r\n\r\nExternalLinkIcon.displayName = \"ExternalLinkIcon\";\r\nexport { ExternalLinkIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}