{
  "name": "corner-up-left",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "keywords": [
    "arrow",
    "return",
    "back",
    "previous"
  ],
  "files": [
    {
      "path": "CornerUpLeftIcon.tsx",
      "content": "\"use client\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport type { HTMLMotionProps, Variants } from \"motion/react\";\r\nimport { motion, useAnimation, useReducedMotion } from \"motion/react\";\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\r\n\r\nexport interface CornerUpLeftIconHandle {\r\n\tstartAnimation: () => void;\r\n\tstopAnimation: () => void;\r\n}\r\n\r\ninterface CornerUpLeftIconProps extends HTMLMotionProps<\"div\"> {\r\n\tsize?: number;\r\n}\r\n\r\nconst CornerUpLeftIcon = forwardRef<\r\n\tCornerUpLeftIconHandle,\r\n\tCornerUpLeftIconProps\r\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n\tconst controls = useAnimation();\r\n\tconst reduced = useReducedMotion();\r\n\tconst isControlled = useRef(false);\r\n\r\n\tuseImperativeHandle(ref, () => {\r\n\t\tisControlled.current = true;\r\n\t\treturn {\r\n\t\t\tstartAnimation: () =>\r\n\t\t\t\treduced ? controls.start(\"normal\") : controls.start(\"animate\"),\r\n\t\t\tstopAnimation: () => controls.start(\"normal\"),\r\n\t\t};\r\n\t});\r\n\r\n\tconst handleEnter = useCallback(\r\n\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\r\n\t\t\tif (reduced) return;\r\n\t\t\tif (!isControlled.current) controls.start(\"animate\");\r\n\t\t\telse onMouseEnter?.(e as any);\r\n\t\t},\r\n\t\t[controls, reduced, onMouseEnter],\r\n\t);\r\n\r\n\tconst handleLeave = useCallback(\r\n\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\r\n\t\t\tif (!isControlled.current) controls.start(\"normal\");\r\n\t\t\telse onMouseLeave?.(e as any);\r\n\t\t},\r\n\t\t[controls, onMouseLeave],\r\n\t);\r\n\r\n\tconst iconVariants: Variants = {\r\n\t\tnormal: { scale: 1, rotate: 0 },\r\n\t\tanimate: {\r\n\t\t\tscale: [1, 1.12, 0.95, 1],\r\n\t\t\trotate: [0, -6, 4, 0],\r\n\t\t\ttransition: { duration: 0.9, ease: \"easeInOut\" },\r\n\t\t},\r\n\t};\r\n\r\n\tconst arrowVariants: Variants = {\r\n\t\tnormal: { opacity: 1, x: 0, y: 0, rotate: 0 },\r\n\t\tanimate: {\r\n\t\t\topacity: [0, 1],\r\n\t\t\tx: [6, -3, 0],\r\n\t\t\ty: [4, -2, 0],\r\n\t\t\trotate: [-20, 10, 0],\r\n\t\t\ttransition: { duration: 0.8, ease: \"easeOut\", delay: 0.1 },\r\n\t\t},\r\n\t};\r\n\r\n\tconst pathVariants: Variants = {\r\n\t\tnormal: { pathLength: 1 },\r\n\t\tanimate: {\r\n\t\t\tpathLength: [0, 1],\r\n\t\t\ttransition: { duration: 0.7, ease: \"easeInOut\" },\r\n\t\t},\r\n\t};\r\n\r\n\treturn (\r\n\t\t<motion.div\r\n\t\t\tclassName={cn(\"inline-flex items-center justify-center\", className)}\r\n\t\t\tonMouseEnter={handleEnter}\r\n\t\t\tonMouseLeave={handleLeave}\r\n\t\t\t{...props}\r\n\t\t>\r\n\t\t\t<motion.svg\r\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\t\t\twidth={size}\r\n\t\t\t\theight={size}\r\n\t\t\t\tviewBox=\"0 0 24 24\"\r\n\t\t\t\tfill=\"none\"\r\n\t\t\t\tstroke=\"currentColor\"\r\n\t\t\t\tstrokeWidth=\"2\"\r\n\t\t\t\tstrokeLinecap=\"round\"\r\n\t\t\t\tstrokeLinejoin=\"round\"\r\n\t\t\t\tanimate={controls}\r\n\t\t\t\tinitial=\"normal\"\r\n\t\t\t\tvariants={iconVariants}\r\n\t\t\t>\r\n\t\t\t\t<motion.path\r\n\t\t\t\t\td=\"M20 20v-7a4 4 0 0 0-4-4H4\"\r\n\t\t\t\t\tvariants={pathVariants}\r\n\t\t\t\t\tinitial=\"normal\"\r\n\t\t\t\t\tanimate={controls}\r\n\t\t\t\t/>\r\n\t\t\t\t<motion.path\r\n\t\t\t\t\td=\"M9 14 4 9l5-5\"\r\n\t\t\t\t\tvariants={arrowVariants}\r\n\t\t\t\t\tinitial=\"normal\"\r\n\t\t\t\t\tanimate={controls}\r\n\t\t\t\t/>\r\n\t\t\t</motion.svg>\r\n\t\t</motion.div>\r\n\t);\r\n});\r\n\r\nCornerUpLeftIcon.displayName = \"CornerUpLeftIcon\";\r\nexport { CornerUpLeftIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}