{
  "name": "loader-circle",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "keywords": [
    "loading",
    "wait",
    "busy",
    "progress",
    "spinner",
    "circle"
  ],
  "files": [
    {
      "path": "LoaderCircleIcon.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport type { HTMLMotionProps, Variants } from \"motion/react\";\nimport { motion, useAnimation } from \"motion/react\";\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\n\nexport interface LoaderCircleIconHandle {\n\tstartAnimation: () => void;\n\tstopAnimation: () => void;\n}\n\ninterface LoaderCircleIconProps extends HTMLMotionProps<\"div\"> {\n\tsize?: number;\n}\n\nconst LoaderCircleIcon = forwardRef<\n\tLoaderCircleIconHandle,\n\tLoaderCircleIconProps\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n\tconst controls = useAnimation();\n\tconst isControlled = useRef(false);\n\n\tuseImperativeHandle(ref, () => {\n\t\tisControlled.current = true;\n\t\treturn {\n\t\t\tstartAnimation: () => controls.start(\"animate\"),\n\t\t\tstopAnimation: () => controls.start(\"normal\"),\n\t\t};\n\t});\n\n\tconst handleEnter = useCallback(\n\t\t(e: React.MouseEvent<HTMLDivElement>) => {\n\t\t\tif (!isControlled.current) {\n\t\t\t\tcontrols.start(\"animate\");\n\t\t\t} else {\n\t\t\t\tonMouseEnter?.(e);\n\t\t\t}\n\t\t},\n\t\t[controls, onMouseEnter],\n\t);\n\n\tconst handleLeave = useCallback(\n\t\t(e: React.MouseEvent<HTMLDivElement>) => {\n\t\t\tif (!isControlled.current) {\n\t\t\t\tcontrols.start(\"normal\");\n\t\t\t} else {\n\t\t\t\tonMouseLeave?.(e);\n\t\t\t}\n\t\t},\n\t\t[controls, onMouseLeave],\n\t);\n\n\tconst wrapperVariants: Variants = {\n\t\tnormal: { rotate: 0, scale: 1 },\n\t\tanimate: {\n\t\t\trotate: 360,\n\t\t\tscale: [1, 1.08, 1],\n\t\t\ttransition: {\n\t\t\t\trotate: { duration: 1.2, ease: \"linear\", repeat: Infinity },\n\t\t\t\tscale: { duration: 0.8, repeat: Infinity, repeatType: \"mirror\" },\n\t\t\t},\n\t\t},\n\t};\n\n\tconst arcVariants: Variants = {\n\t\tnormal: { pathLength: 0.85, pathOffset: 0, opacity: 0.9 },\n\t\tanimate: {\n\t\t\tpathLength: [0.3, 0.85],\n\t\t\tpathOffset: [0, 0.15],\n\t\t\topacity: [0.6, 1],\n\t\t\ttransition: {\n\t\t\t\tduration: 1.2,\n\t\t\t\tease: [0.42, 0, 0.58, 1],\n\t\t\t\trepeat: Infinity,\n\t\t\t},\n\t\t},\n\t};\n\n\treturn (\n\t\t<motion.div\n\t\t\tclassName={cn(className)}\n\t\t\tonMouseEnter={handleEnter}\n\t\t\tonMouseLeave={handleLeave}\n\t\t\t{...props}\n\t\t>\n\t\t\t<motion.svg\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\twidth={size}\n\t\t\t\theight={size}\n\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\tfill=\"none\"\n\t\t\t\tstroke=\"currentColor\"\n\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\tvariants={wrapperVariants}\n\t\t\t\tanimate={controls}\n\t\t\t\tinitial=\"normal\"\n\t\t\t>\n\t\t\t\t<motion.path d=\"M21 12a9 9 0 1 1-6.219-8.56\" variants={arcVariants} />\n\t\t\t</motion.svg>\n\t\t</motion.div>\n\t);\n});\n\nLoaderCircleIcon.displayName = \"LoaderCircleIcon\";\nexport { LoaderCircleIcon };",
      "type": "registry:ui"
    }
  ]
}