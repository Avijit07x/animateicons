{
  "name": "chevron-right",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "keywords": [
    "forward",
    "next",
    "menu",
    ">",
    "code",
    "caret",
    "expand"
  ],
  "files": [
    {
      "path": "ChevronRightIcon.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport type { HTMLMotionProps, Variants } from \"motion/react\";\nimport { motion, useAnimation } from \"motion/react\";\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\n\nexport interface ChevronRightIconHandle {\n\tstartAnimation: () => void;\n\tstopAnimation: () => void;\n}\n\ninterface ChevronRightIconProps extends HTMLMotionProps<\"div\"> {\n\tsize?: number;\n}\n\nconst ChevronRightIcon = forwardRef<\n\tChevronRightIconHandle,\n\tChevronRightIconProps\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n\tconst controls = useAnimation();\n\tconst isControlled = useRef(false);\n\n\tuseImperativeHandle(ref, () => {\n\t\tisControlled.current = true;\n\t\treturn {\n\t\t\tstartAnimation: () => controls.start(\"animate\"),\n\t\t\tstopAnimation: () => controls.start(\"normal\"),\n\t\t};\n\t});\n\n\tconst handleEnter = useCallback(\n\t\t(e: React.MouseEvent<HTMLDivElement>) => {\n\t\t\tif (!isControlled.current) {\n\t\t\t\tcontrols.start(\"animate\");\n\t\t\t} else {\n\t\t\t\tonMouseEnter?.(e);\n\t\t\t}\n\t\t},\n\t\t[controls, onMouseEnter],\n\t);\n\n\tconst handleLeave = useCallback(\n\t\t(e: React.MouseEvent<HTMLDivElement>) => {\n\t\t\tif (!isControlled.current) {\n\t\t\t\tcontrols.start(\"normal\");\n\t\t\t} else {\n\t\t\t\tonMouseLeave?.(e);\n\t\t\t}\n\t\t},\n\t\t[controls, onMouseLeave],\n\t);\n\n\tconst arrowVariants: Variants = {\n\t\tnormal: { x: 0, opacity: 1 },\n\t\tanimate: {\n\t\t\tx: [0, 4, 0],\n\t\t\topacity: [1, 0.6, 1],\n\t\t\ttransition: {\n\t\t\t\tduration: 0.8,\n\t\t\t\trepeat: Infinity,\n\t\t\t},\n\t\t},\n\t};\n\n\tconst trailVariants: Variants = {\n\t\tnormal: { x: 0, opacity: 0 },\n\t\tanimate: {\n\t\t\tx: [6, 10],\n\t\t\topacity: [0.4, 0],\n\t\t\ttransition: {\n\t\t\t\tduration: 0.8,\n\t\t\t\trepeat: Infinity,\n\t\t\t},\n\t\t},\n\t};\n\n\treturn (\n\t\t<motion.div\n\t\t\tclassName={cn(\"inline-flex\", className)}\n\t\t\tonMouseEnter={handleEnter}\n\t\t\tonMouseLeave={handleLeave}\n\t\t\t{...props}\n\t\t>\n\t\t\t<motion.svg\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\twidth={size}\n\t\t\t\theight={size}\n\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\tfill=\"none\"\n\t\t\t\tstroke=\"currentColor\"\n\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\tanimate={controls}\n\t\t\t\tinitial=\"normal\"\n\t\t\t>\n\t\t\t\t<motion.path\n\t\t\t\t\td=\"m9 18 6-6-6-6\"\n\t\t\t\t\tvariants={trailVariants}\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t/>\n\t\t\t\t<motion.path d=\"m9 18 6-6-6-6\" variants={arrowVariants} />\n\t\t\t</motion.svg>\n\t\t</motion.div>\n\t);\n});\n\nChevronRightIcon.displayName = \"ChevronRightIcon\";\nexport { ChevronRightIcon };\n",
      "type": "registry:ui"
    }
  ]
}