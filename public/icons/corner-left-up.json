{
  "name": "corner-left-up",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "keywords": [
    "arrow",
    "return",
    "back",
    "previous"
  ],
  "files": [
    {
      "path": "CornerLeftUpIcon.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport type { HTMLMotionProps, Variants } from \"motion/react\";\nimport { motion, useAnimation, useReducedMotion } from \"motion/react\";\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\n\nexport interface CornerLeftUpIconHandle {\n\tstartAnimation: () => void;\n\tstopAnimation: () => void;\n}\n\ninterface CornerLeftUpIconProps extends HTMLMotionProps<\"div\"> {\n\tsize?: number;\n}\n\nconst CornerLeftUpIcon = forwardRef<\n\tCornerLeftUpIconHandle,\n\tCornerLeftUpIconProps\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n\tconst controls = useAnimation();\n\tconst reduced = useReducedMotion();\n\tconst isControlled = useRef(false);\n\n\tuseImperativeHandle(ref, () => {\n\t\tisControlled.current = true;\n\t\treturn {\n\t\t\tstartAnimation: () =>\n\t\t\t\treduced ? controls.start(\"normal\") : controls.start(\"animate\"),\n\t\t\tstopAnimation: () => controls.start(\"normal\"),\n\t\t};\n\t});\n\n\tconst handleEnter = useCallback(\n\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\n\t\t\tif (reduced) return;\n\t\t\tif (!isControlled.current) controls.start(\"animate\");\n\t\t\telse onMouseEnter?.(e as any);\n\t\t},\n\t\t[controls, reduced, onMouseEnter],\n\t);\n\n\tconst handleLeave = useCallback(\n\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\n\t\t\tif (!isControlled.current) controls.start(\"normal\");\n\t\t\telse onMouseLeave?.(e as any);\n\t\t},\n\t\t[controls, onMouseLeave],\n\t);\n\n\tconst iconVariants: Variants = {\n\t\tnormal: { scale: 1, rotate: 0 },\n\t\tanimate: {\n\t\t\tscale: [1, 1.12, 0.95, 1],\n\t\t\trotate: [0, -6, 4, 0],\n\t\t\ttransition: { duration: 0.9, ease: \"easeInOut\" },\n\t\t},\n\t};\n\n\tconst arrowVariants: Variants = {\n\t\tnormal: { opacity: 1, x: 0, y: 0, rotate: 0 },\n\t\tanimate: {\n\t\t\topacity: [0, 1],\n\t\t\tx: [4, -2, 0],\n\t\t\ty: [6, -3, 0],\n\t\t\trotate: [-20, 10, 0],\n\t\t\ttransition: { duration: 0.8, ease: \"easeOut\", delay: 0.1 },\n\t\t},\n\t};\n\n\tconst pathVariants: Variants = {\n\t\tnormal: { pathLength: 1 },\n\t\tanimate: {\n\t\t\tpathLength: [0, 1],\n\t\t\ttransition: { duration: 0.7, ease: \"easeInOut\" },\n\t\t},\n\t};\n\n\treturn (\n\t\t<motion.div\n\t\t\tclassName={cn(\"inline-flex items-center justify-center\", className)}\n\t\t\tonMouseEnter={handleEnter}\n\t\t\tonMouseLeave={handleLeave}\n\t\t\t{...props}\n\t\t>\n\t\t\t<motion.svg\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\twidth={size}\n\t\t\t\theight={size}\n\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\tfill=\"none\"\n\t\t\t\tstroke=\"currentColor\"\n\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\tanimate={controls}\n\t\t\t\tinitial=\"normal\"\n\t\t\t\tvariants={iconVariants}\n\t\t\t>\n\t\t\t\t<motion.path\n\t\t\t\t\td=\"M20 20h-7a4 4 0 0 1-4-4V4\"\n\t\t\t\t\tvariants={pathVariants}\n\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\tanimate={controls}\n\t\t\t\t/>\n\t\t\t\t<motion.path\n\t\t\t\t\td=\"M14 9 9 4 4 9\"\n\t\t\t\t\tvariants={arrowVariants}\n\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\tanimate={controls}\n\t\t\t\t/>\n\t\t\t</motion.svg>\n\t\t</motion.div>\n\t);\n});\n\nCornerLeftUpIcon.displayName = \"CornerLeftUpIcon\";\nexport { CornerLeftUpIcon };\n",
      "type": "registry:ui"
    }
  ]
}