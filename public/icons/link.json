{
  "name": "link",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "keywords": [
    "chain",
    "url",
    "hyperlink",
    "connection",
    "attachment",
    "reference",
    "linked",
    "website",
    "linking"
  ],
  "files": [
    {
      "path": "LinkIcon.tsx",
      "content": "\"use client\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport type { HTMLMotionProps, Variants } from \"motion/react\";\r\nimport { motion, useAnimation, useReducedMotion } from \"motion/react\";\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\r\n\r\nexport interface LinkIconHandle {\r\n\tstartAnimation: () => void;\r\n\tstopAnimation: () => void;\r\n}\r\n\r\ninterface LinkIconProps extends HTMLMotionProps<\"div\"> {\r\n\tsize?: number;\r\n}\r\n\r\nconst LinkIcon = forwardRef<LinkIconHandle, LinkIconProps>(\r\n\t({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n\t\tconst leftPartControls = useAnimation();\r\n\t\tconst rightPartControls = useAnimation();\r\n\t\tconst reduced = useReducedMotion();\r\n\t\tconst isControlled = useRef(false);\r\n\r\n\t\tuseImperativeHandle(ref, () => {\r\n\t\t\tisControlled.current = true;\r\n\t\t\treturn {\r\n\t\t\t\tstartAnimation: () => {\r\n\t\t\t\t\tif (reduced) {\r\n\t\t\t\t\t\tleftPartControls.start(\"normal\");\r\n\t\t\t\t\t\trightPartControls.start(\"normal\");\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tleftPartControls.start(\"animate\");\r\n\t\t\t\t\t\trightPartControls.start(\"animate\");\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tstopAnimation: () => {\r\n\t\t\t\t\tleftPartControls.start(\"normal\");\r\n\t\t\t\t\trightPartControls.start(\"normal\");\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\tconst handleEnter = useCallback(\r\n\t\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\r\n\t\t\t\tif (reduced) return;\r\n\t\t\t\tif (!isControlled.current) {\r\n\t\t\t\t\tleftPartControls.start(\"animate\");\r\n\t\t\t\t\trightPartControls.start(\"animate\");\r\n\t\t\t\t} else onMouseLeave?.(e as any);\r\n\t\t\t},\r\n\t\t\t[leftPartControls, rightPartControls],\r\n\t\t);\r\n\r\n\t\tconst handleLeave = useCallback(\r\n\t\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\r\n\t\t\t\tif (!isControlled.current) {\r\n\t\t\t\t\tleftPartControls.start(\"normal\");\r\n\t\t\t\t\trightPartControls.start(\"normal\");\r\n\t\t\t\t} else onMouseLeave?.(e as any);\r\n\t\t\t},\r\n\t\t\t[leftPartControls, rightPartControls],\r\n\t\t);\r\n\r\n\t\tconst linkVariantsLeft: Variants = {\r\n\t\t\tnormal: { scale: 1, rotate: 0, x: 0 },\r\n\t\t\tanimate: {\r\n\t\t\t\tx: [0, -2, 0],\r\n\t\t\t\trotate: [0, -3, 0],\r\n\t\t\t\ttransition: {\r\n\t\t\t\t\tduration: 0.9,\r\n\t\t\t\t\tease: \"easeInOut\",\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tconst linkVariantsRight: Variants = {\r\n\t\t\tnormal: { scale: 1, rotate: 0, x: 0 },\r\n\t\t\tanimate: {\r\n\t\t\t\tx: [0, 2, 0],\r\n\t\t\t\trotate: [0, 3, 0],\r\n\t\t\t\ttransition: {\r\n\t\t\t\t\tduration: 0.9,\r\n\t\t\t\t\tease: \"easeInOut\",\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\treturn (\r\n\t\t\t<motion.div\r\n\t\t\t\tclassName={cn(\"inline-flex items-center justify-center\", className)}\r\n\t\t\t\tonMouseEnter={handleEnter}\r\n\t\t\t\tonMouseLeave={handleLeave}\r\n\t\t\t\t{...props}\r\n\t\t\t>\r\n\t\t\t\t<svg\r\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\t\t\t\twidth={size}\r\n\t\t\t\t\theight={size}\r\n\t\t\t\t\tviewBox=\"0 0 24 24\"\r\n\t\t\t\t\tfill=\"none\"\r\n\t\t\t\t\tstroke=\"currentColor\"\r\n\t\t\t\t\tstrokeWidth=\"2\"\r\n\t\t\t\t\tstrokeLinecap=\"round\"\r\n\t\t\t\t\tstrokeLinejoin=\"round\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<motion.path\r\n\t\t\t\t\t\td=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"\r\n\t\t\t\t\t\tvariants={linkVariantsRight}\r\n\t\t\t\t\t\tinitial=\"normal\"\r\n\t\t\t\t\t\tanimate={rightPartControls}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<motion.path\r\n\t\t\t\t\t\td=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"\r\n\t\t\t\t\t\tvariants={linkVariantsLeft}\r\n\t\t\t\t\t\tinitial=\"normal\"\r\n\t\t\t\t\t\tanimate={leftPartControls}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</svg>\r\n\t\t\t</motion.div>\r\n\t\t);\r\n\t},\r\n);\r\n\r\nLinkIcon.displayName = \"LinkIcon\";\r\nexport { LinkIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}