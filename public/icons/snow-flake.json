{
  "name": "snow-flake",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "keywords": [
    "cold",
    "weather",
    "snow",
    "winter",
    "ice",
    "freeze"
  ],
  "files": [
    {
      "path": "SnowFlakeIcon.tsx",
      "content": "\"use client\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport type { HTMLMotionProps } from \"motion/react\";\r\nimport { motion, useAnimation, useReducedMotion } from \"motion/react\";\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\r\n\r\nexport interface SnowflakeIconHandle {\r\n\tstartAnimation: () => void;\r\n\tstopAnimation: () => void;\r\n}\r\n\r\ninterface SnowflakeIconProps extends HTMLMotionProps<\"div\"> {\r\n\tsize?: number;\r\n}\r\n\r\nconst SnowflakeIcon = forwardRef<SnowflakeIconHandle, SnowflakeIconProps>(\r\n\t({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n\t\tconst controls = useAnimation();\r\n\t\tconst reduced = useReducedMotion();\r\n\t\tconst isControlled = useRef(false);\r\n\r\n\t\tuseImperativeHandle(ref, () => {\r\n\t\t\tisControlled.current = true;\r\n\t\t\treturn {\r\n\t\t\t\tstartAnimation: () =>\r\n\t\t\t\t\treduced ? controls.start(\"normal\") : controls.start(\"animate\"),\r\n\t\t\t\tstopAnimation: () => controls.start(\"normal\"),\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\tconst handleEnter = useCallback(\r\n\t\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\r\n\t\t\t\tif (reduced) return;\r\n\t\t\t\tif (!isControlled.current) controls.start(\"animate\");\r\n\t\t\t\telse onMouseEnter?.(e as any);\r\n\t\t\t},\r\n\t\t\t[controls, reduced, onMouseEnter],\r\n\t\t);\r\n\r\n\t\tconst handleLeave = useCallback(\r\n\t\t\t(e: React.MouseEvent<HTMLDivElement>) => {\r\n\t\t\t\tif (!isControlled.current) {\r\n\t\t\t\t\tcontrols.start(\"normal\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tonMouseLeave?.(e as any);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t[controls, onMouseLeave],\r\n\t\t);\r\n\r\n\t\tconst pathVariants = {\r\n\t\t\tnormal: { pathLength: 1, opacity: 1, transition: { duration: 0.3 } },\r\n\t\t\tanimate: {\r\n\t\t\t\tpathLength: [1, 0.3, 1],\r\n\t\t\t\topacity: [1, 0.7, 1],\r\n\t\t\t\ttransition: { duration: 0.8 },\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\treturn (\r\n\t\t\t<motion.div\r\n\t\t\t\tclassName={cn(\"inline-flex items-center justify-center\", className)}\r\n\t\t\t\tonMouseEnter={handleEnter}\r\n\t\t\t\tonMouseLeave={handleLeave}\r\n\t\t\t\t{...props}\r\n\t\t\t>\r\n\t\t\t\t<motion.svg\r\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\t\t\t\twidth={size}\r\n\t\t\t\t\theight={size}\r\n\t\t\t\t\tviewBox=\"0 0 24 24\"\r\n\t\t\t\t\tfill=\"none\"\r\n\t\t\t\t\tstroke=\"currentColor\"\r\n\t\t\t\t\tstrokeWidth=\"2\"\r\n\t\t\t\t\tstrokeLinecap=\"round\"\r\n\t\t\t\t\tstrokeLinejoin=\"round\"\r\n\t\t\t\t\tvariants={{\r\n\t\t\t\t\t\tnormal: { rotate: 0, scale: 1, transition: { duration: 0.3 } },\r\n\t\t\t\t\t\tanimate: {\r\n\t\t\t\t\t\t\trotate: [0, 10, -10, 0],\r\n\t\t\t\t\t\t\tscale: [1, 1.05, 1],\r\n\t\t\t\t\t\t\ttransition: { duration: 1 },\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tanimate={controls}\r\n\t\t\t\t\tinitial=\"normal\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<motion.path d=\"m10 20-1.25-2.5L6 18\" variants={pathVariants} />\r\n\t\t\t\t\t<motion.path d=\"M10 4 8.75 6.5 6 6\" variants={pathVariants} />\r\n\t\t\t\t\t<motion.path d=\"m14 20 1.25-2.5L18 18\" variants={pathVariants} />\r\n\t\t\t\t\t<motion.path d=\"m14 4 1.25 2.5L18 6\" variants={pathVariants} />\r\n\t\t\t\t\t<motion.path d=\"m17 21-3-6h-4\" variants={pathVariants} />\r\n\t\t\t\t\t<motion.path d=\"m17 3-3 6 1.5 3\" variants={pathVariants} />\r\n\t\t\t\t\t<motion.path d=\"M2 12h6.5L10 9\" variants={pathVariants} />\r\n\t\t\t\t\t<motion.path d=\"m20 10-1.5 2 1.5 2\" variants={pathVariants} />\r\n\t\t\t\t\t<motion.path d=\"M22 12h-6.5L14 15\" variants={pathVariants} />\r\n\t\t\t\t\t<motion.path d=\"m4 10 1.5 2L4 14\" variants={pathVariants} />\r\n\t\t\t\t\t<motion.path d=\"m7 21 3-6-1.5-3\" variants={pathVariants} />\r\n\t\t\t\t\t<motion.path d=\"m7 3 3 6h4\" variants={pathVariants} />\r\n\t\t\t\t</motion.svg>\r\n\t\t\t</motion.div>\r\n\t\t);\r\n\t},\r\n);\r\n\r\nSnowflakeIcon.displayName = \"SnowflakeIcon\";\r\nexport { SnowflakeIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}