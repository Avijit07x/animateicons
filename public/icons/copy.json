{
  "name": "copy",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "keywords": [
    "clone",
    "duplicate",
    "multiple",
    "clipboard",
    "copy"
  ],
  "files": [
    {
      "path": "CopyIcon.tsx",
      "content": "\"use client\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport type { HTMLMotionProps, Transition } from \"motion/react\";\r\nimport { motion, useAnimation, useReducedMotion } from \"motion/react\";\r\nimport type { HTMLAttributes } from \"react\";\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\r\n\r\nexport interface CopyIconHandle {\r\n\tstartAnimation: () => void;\r\n\tstopAnimation: () => void;\r\n}\r\n\r\ninterface CopyIconProps extends HTMLMotionProps<\"div\"> {\r\n\tsize?: number;\r\n}\r\n\r\nconst CopyIcon = forwardRef<CopyIconHandle, CopyIconProps>(\r\n\t({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n\t\tconst controls = useAnimation();\r\n\t\tconst reduced = useReducedMotion();\r\n\t\tconst isControlled = useRef(false);\r\n\r\n\r\n\t\tuseImperativeHandle(ref, () => {\r\n\t\t\tisControlled.current = true;\r\n\t\t\treturn {\r\n\t\t\t\tstartAnimation: () =>\r\n\t\t\t\t\treduced ? controls.start(\"normal\") : controls.start(\"animate\"),\r\n\t\t\t\tstopAnimation: () => controls.start(\"normal\"),\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\tconst handleEnter = useCallback(\r\n\t\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\r\n\t\t\t\tif (reduced) return;\r\n\t\t\t\tif (!isControlled.current) controls.start(\"animate\");\r\n\t\t\t\telse onMouseEnter?.(e as any);\r\n\t\t\t},\r\n\t\t\t[controls, reduced, onMouseEnter],\r\n\t\t);\r\n\r\n\t\tconst handleLeave = useCallback(\r\n\t\t\t(e: React.MouseEvent<HTMLDivElement>) => {\r\n\t\t\t\tif (!isControlled.current) {\r\n\t\t\t\t\tcontrols.start(\"normal\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tonMouseLeave?.(e as any);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t[controls, onMouseLeave],\r\n\t\t);\r\n\t\tconst defaultTransition: Transition = {\r\n\t\t\ttype: \"spring\",\r\n\t\t\tstiffness: 160,\r\n\t\t\tdamping: 17,\r\n\t\t\tmass: 1,\r\n\t\t};\r\n\r\n\t\tconst boxVariants = {\r\n\t\t\tnormal: { translateY: 0, translateX: 0, rotate: 0 },\r\n\t\t\tanimate: { translateY: -3, translateX: -3, rotate: 360 },\r\n\t\t};\r\n\r\n\t\tconst pathVariants = {\r\n\t\t\tnormal: { x: 0, y: 0 },\r\n\t\t\tanimate: { x: 3, y: 3 },\r\n\t\t};\r\n\r\n\t\treturn (\r\n\t\t\t<motion.div\r\n\t\t\t\tclassName={cn(\"inline-flex items-center justify-center\", className)}\r\n\t\t\t\tonMouseEnter={handleEnter}\r\n\t\t\t\tonMouseLeave={handleLeave}\r\n\t\t\t\t{...props}\r\n\t\t\t>\r\n\t\t\t\t<motion.svg\r\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\t\t\t\twidth={size}\r\n\t\t\t\t\theight={size}\r\n\t\t\t\t\tviewBox=\"0 0 24 24\"\r\n\t\t\t\t\tfill=\"none\"\r\n\t\t\t\t\tstroke=\"currentColor\"\r\n\t\t\t\t\tstrokeWidth=\"2\"\r\n\t\t\t\t\tstrokeLinecap=\"round\"\r\n\t\t\t\t\tstrokeLinejoin=\"round\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<motion.rect\r\n\t\t\t\t\t\twidth=\"14\"\r\n\t\t\t\t\t\theight=\"14\"\r\n\t\t\t\t\t\tx=\"8\"\r\n\t\t\t\t\t\ty=\"8\"\r\n\t\t\t\t\t\trx=\"2\"\r\n\t\t\t\t\t\try=\"2\"\r\n\t\t\t\t\t\tvariants={boxVariants}\r\n\t\t\t\t\t\tanimate={controls}\r\n\t\t\t\t\t\ttransition={{\r\n\t\t\t\t\t\t\t...defaultTransition,\r\n\t\t\t\t\t\t\tduration: 0.7,\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<motion.path\r\n\t\t\t\t\t\td=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"\r\n\t\t\t\t\t\tvariants={pathVariants}\r\n\t\t\t\t\t\tanimate={controls}\r\n\t\t\t\t\t\ttransition={defaultTransition}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</motion.svg>\r\n\t\t\t</motion.div>\r\n\t\t);\r\n\t},\r\n);\r\n\r\nCopyIcon.displayName = \"CopyIcon\";\r\n\r\nexport { CopyIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}