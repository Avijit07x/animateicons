{
  "name": "circle-chevron-right",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "keywords": [
    "forward",
    "next",
    "menu",
    ">",
    "code",
    "caret",
    "expand"
  ],
  "files": [
    {
      "path": "CircleChevronRightIcon.tsx",
      "content": "\"use client\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport type { HTMLMotionProps, Variants } from \"motion/react\";\r\nimport { motion, useAnimation, useReducedMotion } from \"motion/react\";\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\r\n\r\nexport interface CircleChevronRightIconHandle {\r\n\tstartAnimation: () => void;\r\n\tstopAnimation: () => void;\r\n}\r\n\r\ninterface CircleChevronRightIconProps extends HTMLMotionProps<\"div\"> {\r\n\tsize?: number;\r\n}\r\n\r\nconst CircleChevronRightIcon = forwardRef<\r\n\tCircleChevronRightIconHandle,\r\n\tCircleChevronRightIconProps\r\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n\tconst circleControls = useAnimation();\r\n\tconst arrowControls = useAnimation();\r\n\tconst isControlled = useRef(false);\r\n\tconst tickControls = useAnimation();\r\n\tconst reduced = useReducedMotion();\r\n\r\n\tuseImperativeHandle(ref, () => {\r\n\t\tisControlled.current = true;\r\n\t\treturn {\r\n\t\t\tstartAnimation: () => {\r\n\t\t\t\tif (reduced) {\r\n\t\t\t\t\tcircleControls.start(\"normal\");\r\n\t\t\t\t\ttickControls.start(\"normal\");\r\n\t\t\t\t\tarrowControls.start(\"normal\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcircleControls.start(\"animate\");\r\n\t\t\t\t\ttickControls.start(\"animate\");\r\n\t\t\t\t\tarrowControls.start(\"animate\");\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tstopAnimation: () => {\r\n\t\t\t\tcircleControls.start(\"normal\");\r\n\t\t\t\ttickControls.start(\"normal\");\r\n\t\t\t\tarrowControls.start(\"normal\");\r\n\t\t\t},\r\n\t\t};\r\n\t});\r\n\r\n\tconst handleEnter = useCallback(\r\n\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\r\n\t\t\tif (reduced) return;\r\n\t\t\tif (!isControlled.current) {\r\n\t\t\t\tcircleControls.start(\"animate\");\r\n\t\t\t\ttickControls.start(\"animate\");\r\n\t\t\t\tarrowControls.start(\"animate\");\r\n\t\t\t} else {\r\n\t\t\t\tonMouseEnter?.(e as any);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[circleControls, tickControls, reduced, onMouseEnter],\r\n\t);\r\n\r\n\tconst handleLeave = useCallback(\r\n\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\r\n\t\t\tif (!isControlled.current) {\r\n\t\t\t\tcircleControls.start(\"normal\");\r\n\t\t\t\ttickControls.start(\"normal\");\r\n\t\t\t\tarrowControls.start(\"normal\");\r\n\t\t\t} else {\r\n\t\t\t\tonMouseLeave?.(e as any);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[circleControls, tickControls, onMouseLeave],\r\n\t);\r\n\r\n\tconst circleVariants: Variants = {\r\n\t\tnormal: { scale: 1, opacity: 1 },\r\n\t\tanimate: {\r\n\t\t\tscale: [1, 1.08, 0.95, 1],\r\n\t\t\ttransition: {\r\n\t\t\t\tduration: 0.8,\r\n\t\t\t\tease: \"easeInOut\",\r\n\t\t\t},\r\n\t\t},\r\n\t};\r\n\r\n\tconst arrowVariants: Variants = {\r\n\t\tnormal: { x: 0, opacity: 1 },\r\n\t\tanimate: {\r\n\t\t\tx: [8, 0, 2, 0],\r\n\t\t\topacity: 1,\r\n\t\t\ttransition: {\r\n\t\t\t\tduration: 0.9,\r\n\t\t\t\tease: \"easeOut\",\r\n\t\t\t},\r\n\t\t},\r\n\t};\r\n\r\n\treturn (\r\n\t\t<motion.div\r\n\t\t\tclassName={cn(\"inline-flex items-center justify-center\", className)}\r\n\t\t\tonMouseEnter={handleEnter}\r\n\t\t\tonMouseLeave={handleLeave}\r\n\t\t\t{...props}\r\n\t\t>\r\n\t\t\t<motion.svg\r\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\t\t\twidth={size}\r\n\t\t\t\theight={size}\r\n\t\t\t\tviewBox=\"0 0 24 24\"\r\n\t\t\t\tfill=\"none\"\r\n\t\t\t\tstroke=\"currentColor\"\r\n\t\t\t\tstrokeWidth=\"2\"\r\n\t\t\t\tstrokeLinecap=\"round\"\r\n\t\t\t\tstrokeLinejoin=\"round\"\r\n\t\t\t>\r\n\t\t\t\t<motion.circle\r\n\t\t\t\t\tcx=\"12\"\r\n\t\t\t\t\tcy=\"12\"\r\n\t\t\t\t\tr=\"10\"\r\n\t\t\t\t\tanimate={circleControls}\r\n\t\t\t\t\tinitial=\"normal\"\r\n\t\t\t\t\tvariants={circleVariants}\r\n\t\t\t\t/>\r\n\t\t\t\t<motion.path\r\n\t\t\t\t\td=\"m10 8 4 4-4 4\"\r\n\t\t\t\t\tanimate={arrowControls}\r\n\t\t\t\t\tinitial=\"normal\"\r\n\t\t\t\t\tvariants={arrowVariants}\r\n\t\t\t\t/>\r\n\t\t\t</motion.svg>\r\n\t\t</motion.div>\r\n\t);\r\n});\r\n\r\nCircleChevronRightIcon.displayName = \"CircleChevronRightIcon\";\r\nexport { CircleChevronRightIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}