{
  "name": "biceps-flexed",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "keywords": [
    "arm",
    "muscle",
    "strong",
    "workout",
    "fitness",
    "strength"
  ],
  "files": [
    {
      "path": "BicepsFlexedIcon.tsx",
      "content": "\"use client\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport type { HTMLMotionProps, Variants } from \"motion/react\";\r\nimport { motion, useAnimation, useReducedMotion } from \"motion/react\";\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\r\n\r\nexport interface BicepsFlexedIconHandle {\r\n\tstartAnimation: () => void;\r\n\tstopAnimation: () => void;\r\n}\r\n\r\ninterface BicepsFlexedIconProps extends HTMLMotionProps<\"div\"> {\r\n\tsize?: number;\r\n}\r\n\r\nconst BicepsFlexedIcon = forwardRef<\r\n\tBicepsFlexedIconHandle,\r\n\tBicepsFlexedIconProps\r\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n\tconst controls = useAnimation();\r\n\tconst reduced = useReducedMotion();\r\n\tconst isControlled = useRef(false);\r\n\r\n\tuseImperativeHandle(ref, () => {\r\n\t\tisControlled.current = true;\r\n\t\treturn {\r\n\t\t\tstartAnimation: () =>\r\n\t\t\t\treduced ? controls.start(\"normal\") : controls.start(\"animate\"),\r\n\t\t\tstopAnimation: () => controls.start(\"normal\"),\r\n\t\t};\r\n\t});\r\n\r\n\tconst handleEnter = useCallback(\r\n\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\r\n\t\t\tif (reduced) return;\r\n\t\t\tif (!isControlled.current) controls.start(\"animate\");\r\n\t\t\telse onMouseEnter?.(e as any);\r\n\t\t},\r\n\t\t[controls, reduced, onMouseEnter],\r\n\t);\r\n\r\n\tconst handleLeave = useCallback(\r\n\t\t(e: React.MouseEvent<HTMLDivElement>) => {\r\n\t\t\tif (!isControlled.current) {\r\n\t\t\t\tcontrols.start(\"normal\");\r\n\t\t\t} else {\r\n\t\t\t\tonMouseLeave?.(e as any);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[controls, onMouseLeave],\r\n\t);\r\n\r\n\tconst pathVariants: Variants = {\r\n\t\tnormal: { rotate: 0, scale: 1, transition: { duration: 0.3 } },\r\n\t\tanimate: {\r\n\t\t\trotate: [0, -10, 10, 0],\r\n\t\t\tscale: [1, 1.2, 1.2, 1],\r\n\t\t\ttransition: { duration: 0.6 },\r\n\t\t},\r\n\t};\r\n\r\n\treturn (\r\n\t\t<motion.div\r\n\t\t\tclassName={cn(\"inline-flex items-center justify-center\", className)}\r\n\t\t\tonMouseEnter={handleEnter}\r\n\t\t\tonMouseLeave={handleLeave}\r\n\t\t\t{...props}\r\n\t\t>\r\n\t\t\t<motion.svg\r\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\t\t\twidth={size}\r\n\t\t\t\theight={size}\r\n\t\t\t\tviewBox=\"0 0 24 24\"\r\n\t\t\t\tfill=\"none\"\r\n\t\t\t\tstroke=\"currentColor\"\r\n\t\t\t\tstrokeWidth=\"2\"\r\n\t\t\t\tstrokeLinecap=\"round\"\r\n\t\t\t\tstrokeLinejoin=\"round\"\r\n\t\t\t\tvariants={pathVariants}\r\n\t\t\t\tanimate={controls}\r\n\t\t\t\tinitial=\"normal\"\r\n\t\t\t>\r\n\t\t\t\t<path d=\"M12.409 13.017A5 5 0 0 1 22 15c0 3.866-4 7-9 7-4.077 0-8.153-.82-10.371-2.462-.426-.316-.631-.832-.62-1.362C2.118 12.723 2.627 2 10 2a3 3 0 0 1 3 3 2 2 0 0 1-2 2c-1.105 0-1.64-.444-2-1\" />\r\n\t\t\t\t<path d=\"M15 14a5 5 0 0 0-7.584 2\" />\r\n\t\t\t\t<path d=\"M9.964 6.825C8.019 7.977 9.5 13 8 15\" />\r\n\t\t\t</motion.svg>\r\n\t\t</motion.div>\r\n\t);\r\n});\r\n\r\nBicepsFlexedIcon.displayName = \"BicepsFlexedIcon\";\r\nexport { BicepsFlexedIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}