{
  "name": "signal",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "keywords": [
    "wifi",
    "connection",
    "network",
    "bars",
    "cellular",
    "reception",
    "coverage",
    "strength",
    "data",
    "internet",
    "wireless",
    "hotspot",
    "signal",
    "antenna",
    "tower"
  ],
  "files": [
    {
      "path": "SignalIcon.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport type { HTMLMotionProps, Variants } from \"motion/react\";\nimport { motion, useAnimation } from \"motion/react\";\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\n\nexport interface SignalHandle {\n\tstartAnimation: () => void;\n\tstopAnimation: () => void;\n}\n\ninterface SignalProps extends HTMLMotionProps<\"div\"> {\n\tsize?: number;\n}\n\nconst SignalIcon = forwardRef<SignalHandle, SignalProps>(\n\t({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n\t\tconst groupControls = useAnimation();\n\t\tconst isControlled = useRef(false);\n\n\t\tuseImperativeHandle(ref, () => {\n\t\t\tisControlled.current = true;\n\t\t\treturn {\n\t\t\t\tstartAnimation: () => {\n\t\t\t\t\tgroupControls.start(\"animate\");\n\t\t\t\t},\n\t\t\t\tstopAnimation: () => {\n\t\t\t\t\tgroupControls.start(\"normal\");\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\n\t\tconst handleEnter = useCallback(() => {\n\t\t\tif (!isControlled.current) {\n\t\t\t\tgroupControls.start(\"animate\");\n\t\t\t}\n\t\t}, [groupControls]);\n\n\t\tconst handleLeave = useCallback(() => {\n\t\t\tif (!isControlled.current) {\n\t\t\t\tgroupControls.start(\"normal\");\n\t\t\t}\n\t\t}, [groupControls]);\n\n\t\tconst sway: Variants = {\n\t\t\tnormal: { rotate: 0, x: 0, y: 0, scale: 1 },\n\t\t\tanimate: {\n\t\t\t\trotate: [0, -2, 1, 0],\n\t\t\t\tx: [0, -0.4, 0.2, 0],\n\t\t\t\ty: [0, -0.3, 0.1, 0],\n\t\t\t\tscale: [1, 1.018, 1],\n\t\t\t\ttransition: { duration: 0.7, ease: \"easeInOut\" },\n\t\t\t},\n\t\t};\n\n\t\tconst dotKick: Variants = {\n\t\t\tnormal: { scale: 1, opacity: 1 },\n\t\t\tanimate: {\n\t\t\t\tscale: [1, 1.18, 1],\n\t\t\t\topacity: [1, 1, 1],\n\t\t\t\ttransition: { duration: 0.3, ease: \"easeOut\", delay: 0.06 },\n\t\t\t},\n\t\t};\n\n\t\tconst barBounce = (delay: number): Variants => ({\n\t\t\tnormal: { y: 0, scaleY: 1, opacity: 1, transformOrigin: \"center bottom\" },\n\t\t\tanimate: {\n\t\t\t\ty: [0, -0.8, 0],\n\t\t\t\tscaleY: [1, 1.1, 1],\n\t\t\t\topacity: [1, 1, 1],\n\t\t\t\ttransition: { duration: 0.42, ease: \"easeOut\", delay },\n\t\t\t},\n\t\t});\n\n\t\tconst barBreathe = (delay: number): Variants => ({\n\t\t\tnormal: { scaleY: 1, transformOrigin: \"center bottom\" },\n\t\t\tanimate: {\n\t\t\t\tscaleY: [1, 1.04, 1],\n\t\t\t\ttransition: { duration: 0.5, ease: \"easeInOut\", delay },\n\t\t\t},\n\t\t});\n\n\t\tconst svgVariants: Variants = {\n\t\t\tnormal: { scale: 1, rotate: 0, y: 0 },\n\t\t\tanimate: {\n\t\t\t\tscale: [1, 1.06, 1],\n\t\t\t\trotate: [0, -2, 2, 0],\n\t\t\t\ty: [0, -1, 0],\n\t\t\t\ttransition: { duration: 0.9, ease: \"easeInOut\" },\n\t\t\t},\n\t\t};\n\n\t\treturn (\n\t\t\t<motion.div\n\t\t\t\tclassName={cn(\"inline-flex items-center justify-center\", className)}\n\t\t\t\tonMouseEnter={handleEnter}\n\t\t\t\tonMouseLeave={handleLeave}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<motion.svg\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\twidth={size}\n\t\t\t\t\theight={size}\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t\tclassName=\"lucide lucide-signal-icon lucide-signal\"\n\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\tanimate={groupControls}\n\t\t\t\t\tvariants={svgVariants}\n\t\t\t\t>\n\t\t\t\t\t<motion.g variants={sway} initial=\"normal\" animate={groupControls}>\n\t\t\t\t\t\t<motion.path\n\t\t\t\t\t\t\td=\"M2 20h.01\"\n\t\t\t\t\t\t\tvariants={dotKick}\n\t\t\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\t\t\tanimate={groupControls}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<motion.g initial=\"normal\" animate={groupControls}>\n\t\t\t\t\t\t\t<motion.path d=\"M7 20v-4\" variants={barBounce(0.06)} />\n\t\t\t\t\t\t\t<motion.path d=\"M12 20v-8\" variants={barBounce(0.12)} />\n\t\t\t\t\t\t\t<motion.path d=\"M17 20V8\" variants={barBounce(0.18)} />\n\t\t\t\t\t\t\t<motion.path d=\"M22 4v16\" variants={barBounce(0.24)} />\n\t\t\t\t\t\t</motion.g>\n\t\t\t\t\t\t<motion.g initial=\"normal\" animate={groupControls}>\n\t\t\t\t\t\t\t<motion.path d=\"M7 20v-4\" variants={barBreathe(0.32)} />\n\t\t\t\t\t\t\t<motion.path d=\"M12 20v-8\" variants={barBreathe(0.36)} />\n\t\t\t\t\t\t\t<motion.path d=\"M17 20V8\" variants={barBreathe(0.4)} />\n\t\t\t\t\t\t\t<motion.path d=\"M22 4v16\" variants={barBreathe(0.44)} />\n\t\t\t\t\t\t</motion.g>\n\t\t\t\t\t</motion.g>\n\t\t\t\t</motion.svg>\n\t\t\t</motion.div>\n\t\t);\n\t},\n);\n\nSignalIcon.displayName = \"SignalIcon\";\nexport { SignalIcon };\n",
      "type": "registry:ui"
    }
  ]
}